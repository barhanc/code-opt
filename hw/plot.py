nflops_per_cycle = 4
nprocessors = 1
max_GHz_of_processor = 5.2
max_gflops = nflops_per_cycle * nprocessors * max_GHz_of_processor

# L1 Cache: 1408 Kb ; L2 Cache: 14 MB ; L3 Cache: 30 MB
# 16-Core (8P+8E)
# 24 Threads
# Intel Turbo Boost Max Technology 3.0 Frequency: Up to 5.2 GHz
# Single P-core Turbo Frequency: Up to 5.1 GHz
# Single E-core Turbo Frequency: Up to 3.9 GHz
# 819.2 GFLOPS (https://www.intel.com/content/dam/support/us/en/documents/processors/APP-for-Intel-Core-Processors.pdf)
"""
https://en.wikichip.org/wiki/intel/microarchitectures/alder_lake
L1I Cache	32 KB/core
L1D Cache	48 KB (P) / 64 KB (E)/core
L1 Cache	80 KB (P) / 96 KB (E)/core
L2 Cache	1.25 MB (P) / 2MB (4E)/core
L3 Cache	up to 30 MB
"""
# gcc -Wall -O2 -mavx -march=alderlake main.c -fopenmp -lm

import numpy as np
import matplotlib.pyplot as plt


a0 = np.array(
    [
        [20, 2.666667e00],
        [40, 2.666667e00],
        [60, 2.526316e00],
        [80, 2.509804e00],
        [100, 2.298851e00],
        [120, 2.493506e00],
        [140, 2.478771e00],
        [160, 2.464501e00],
        [180, 2.471710e00],
        [200, 2.458890e00],
        [220, 2.467385e00],
        [240, 2.462196e00],
        [260, 2.420437e00],
        [280, 2.405040e00],
        [300, 2.299438e00],
        [320, 2.462834e00],
        [340, 2.469620e00],
        [360, 2.516098e00],
        [380, 2.535265e00],
        [400, 2.531395e00],
        [420, 2.510904e00],
        [440, 2.514471e00],
        [460, 2.537468e00],
        [480, 2.544363e00],
        [500, 2.514660e00],
        [520, 2.424067e00],
        [540, 2.494736e00],
        [560, 2.511904e00],
        [580, 2.501869e00],
        [600, 2.537400e00],
        [620, 2.534905e00],
        [640, 2.527298e00],
        [660, 2.524452e00],
        [680, 2.534413e00],
        [700, 2.528771e00],
        [720, 2.520915e00],
        [740, 2.540239e00],
        [760, 2.533904e00],
        [780, 2.478227e00],
        [800, 2.533951e00],
        [820, 2.536635e00],
        [840, 2.538358e00],
        [860, 2.485521e00],
        [880, 2.265558e00],
        [900, 2.530380e00],
        [920, 2.527966e00],
        [940, 2.506621e00],
        [960, 2.532205e00],
        [980, 2.540720e00],
        [1000, 2.521699e00],
        [1020, 2.533055e00],
        [1040, 2.532143e00],
        [1060, 2.513623e00],
        [1080, 2.534328e00],
        [1100, 2.529846e00],
        [1120, 2.409030e00],
        [1140, 2.404920e00],
        [1160, 2.259403e00],
        [1180, 2.359371e00],
        [1200, 2.445974e00],
        [1220, 2.286748e00],
        [1240, 2.358942e00],
        [1260, 2.430828e00],
        [1280, 2.397943e00],
        [1300, 2.346354e00],
        [1320, 2.344729e00],
        [1340, 2.485453e00],
        [1360, 2.440952e00],
        [1380, 2.372853e00],
        [1400, 2.423398e00],
        [1420, 2.384556e00],
        [1440, 2.412870e00],
        [1460, 2.428017e00],
        [1480, 2.388789e00],
        [1500, 2.405134e00],
    ]
)

a1 = np.array(
    [
        [20, 5.333333e00],
        [40, 6.095238e00],
        [60, 1.411765e00],
        [80, 6.826667e00],
        [100, 7.936508e00],
        [120, 8.470588e00],
        [140, 8.669826e00],
        [160, 8.533333e00],
        [180, 8.325482e00],
        [200, 8.307373e00],
        [220, 7.913787e00],
        [240, 6.960725e00],
        [260, 7.618552e00],
        [280, 7.771995e00],
        [300, 7.926024e00],
        [320, 8.379491e00],
        [340, 7.621485e00],
        [360, 8.239470e00],
        [380, 8.127379e00],
        [400, 8.099215e00],
        [420, 7.326016e00],
        [440, 7.718039e00],
        [460, 7.537538e00],
        [480, 7.278902e00],
        [500, 7.538749e00],
        [520, 7.573006e00],
        [540, 7.753028e00],
        [560, 7.069034e00],
        [580, 6.366535e00],
        [600, 6.977082e00],
        [620, 7.623325e00],
        [640, 7.641568e00],
        [660, 7.569369e00],
        [680, 7.884651e00],
        [700, 7.548499e00],
        [720, 7.696867e00],
        [740, 7.520861e00],
        [760, 7.503286e00],
        [780, 7.537417e00],
        [800, 6.799333e00],
        [820, 6.850909e00],
        [840, 6.849417e00],
        [860, 7.646374e00],
        [880, 7.689041e00],
        [900, 7.826465e00],
        [920, 7.477283e00],
        [940, 7.812776e00],
        [960, 7.394336e00],
        [980, 7.611681e00],
        [1000, 7.857373e00],
        [1020, 7.837549e00],
        [1040, 7.558351e00],
        [1060, 7.814373e00],
        [1080, 7.603375e00],
        [1100, 7.783557e00],
        [1120, 7.155605e00],
        [1140, 7.621170e00],
        [1160, 7.696897e00],
        [1180, 7.830002e00],
        [1200, 7.696985e00],
        [1220, 7.779533e00],
        [1240, 7.294634e00],
        [1260, 7.628675e00],
        [1280, 7.885601e00],
        [1300, 7.484589e00],
        [1320, 7.774194e00],
        [1340, 7.785648e00],
        [1360, 7.804655e00],
        [1380, 7.832517e00],
        [1400, 7.816061e00],
        [1420, 7.934832e00],
        [1440, 7.753225e00],
        [1460, 7.789005e00],
        [1480, 7.476371e00],
        [1500, 7.833525e00],
    ]
)

a2 = np.array(
    [
        [20, 2.666667e00],
        [40, 6.095238e00],
        [60, 8.470588e00],
        [80, 1.137778e01],
        [100, 1.257862e01],
        [120, 1.387952e01],
        [140, 1.463467e01],
        [160, 1.492168e01],
        [180, 1.495385e01],
        [200, 1.587302e01],
        [220, 1.539841e01],
        [240, 1.498537e01],
        [260, 1.549912e01],
        [280, 1.580418e01],
        [300, 1.566580e01],
        [320, 1.618173e01],
        [340, 1.519876e01],
        [360, 1.328663e01],
        [380, 1.341450e01],
        [400, 1.182230e01],
        [420, 1.352464e01],
        [440, 1.046615e01],
        [460, 1.034939e01],
        [480, 1.017640e01],
        [500, 9.033424e00],
        [520, 8.513957e00],
        [540, 8.250236e00],
        [560, 8.015701e00],
        [580, 7.781447e00],
        [600, 7.674679e00],
        [620, 7.871066e00],
        [640, 7.768956e00],
        [660, 7.776993e00],
        [680, 7.599106e00],
        [700, 7.625272e00],
        [720, 7.669821e00],
        [740, 7.259152e00],
        [760, 7.270282e00],
        [780, 7.324351e00],
        [800, 7.273089e00],
        [820, 7.342175e00],
        [840, 7.322622e00],
        [860, 7.241322e00],
        [880, 7.498179e00],
        [900, 7.237851e00],
        [920, 7.422969e00],
        [940, 7.380410e00],
        [960, 7.415812e00],
        [980, 7.399308e00],
        [1000, 7.190184e00],
        [1020, 7.350817e00],
        [1040, 7.293632e00],
        [1060, 7.325227e00],
        [1080, 6.368067e00],
        [1100, 7.204369e00],
        [1120, 7.499789e00],
        [1140, 7.318977e00],
        [1160, 7.355864e00],
        [1180, 7.309723e00],
        [1200, 7.244144e00],
        [1220, 7.302064e00],
        [1240, 7.222225e00],
        [1260, 7.275179e00],
        [1280, 7.388566e00],
        [1300, 7.264995e00],
        [1320, 7.327026e00],
        [1340, 7.220464e00],
        [1360, 6.686779e00],
        [1380, 7.182144e00],
        [1400, 7.198840e00],
        [1420, 7.622720e00],
        [1440, 7.116144e00],
        [1460, 7.116471e00],
        [1480, 7.133009e00],
        [1500, 7.014656e00],
    ]
)

a3 = np.array(
    [
        [20, 2.666667e00],
        [40, 6.095238e00],
        [60, 8.000000e00],
        [80, 9.225225e00],
        [100, 1.092896e01],
        [120, 1.152000e01],
        [140, 1.203509e01],
        [160, 1.219048e01],
        [180, 1.250161e01],
        [200, 1.307190e01],
        [220, 1.256401e01],
        [240, 1.243725e01],
        [260, 1.294733e01],
        [280, 1.350062e01],
        [300, 1.329394e01],
        [320, 1.364481e01],
        [340, 1.241244e01],
        [360, 1.133115e01],
        [380, 1.174738e01],
        [400, 1.146337e01],
        [420, 1.105461e01],
        [440, 9.914339e00],
        [460, 9.878317e00],
        [480, 9.479043e00],
        [500, 9.065854e00],
        [520, 6.125909e00],
        [540, 8.788280e00],
        [560, 8.412541e00],
        [580, 8.373007e00],
        [600, 8.406795e00],
        [620, 8.459897e00],
        [640, 7.991708e00],
        [660, 8.263160e00],
        [680, 8.162825e00],
        [700, 8.335460e00],
        [720, 8.305474e00],
        [740, 8.259427e00],
        [760, 7.940811e00],
        [780, 8.049667e00],
        [800, 8.119831e00],
        [820, 8.202867e00],
        [840, 8.284816e00],
        [860, 8.258430e00],
        [880, 8.218279e00],
        [900, 8.194372e00],
        [920, 8.227417e00],
        [940, 8.367804e00],
        [960, 8.070494e00],
        [980, 8.140708e00],
        [1000, 8.493002e00],
        [1020, 6.708439e00],
        [1040, 8.083446e00],
        [1060, 8.137773e00],
        [1080, 8.168623e00],
        [1100, 8.204047e00],
        [1120, 8.145714e00],
        [1140, 7.833573e00],
        [1160, 8.750030e00],
        [1180, 8.424833e00],
        [1200, 8.400481e00],
        [1220, 8.255862e00],
        [1240, 8.115089e00],
        [1260, 8.144572e00],
        [1280, 7.447326e00],
        [1300, 8.463248e00],
        [1320, 8.322001e00],
        [1340, 8.489026e00],
        [1360, 8.214606e00],
        [1380, 8.501538e00],
        [1400, 8.421531e00],
        [1420, 8.566473e00],
        [1440, 8.728918e00],
        [1460, 8.379371e00],
        [1480, 8.501411e00],
        [1500, 8.229760e00],
    ]
)

a4 = np.array(
    [
        [20, 1.795735e-02],
        [40, 2.902494e-01],
        [60, 7.346939e-01],
        [80, 1.410468e00],
        [100, 3.267974e00],
        [120, 4.740741e00],
        [140, 5.844515e00],
        [160, 7.713748e00],
        [180, 9.126761e00],
        [200, 1.010101e01],
        [220, 1.209313e01],
        [240, 1.345401e01],
        [260, 1.827977e01],
        [280, 2.244581e01],
        [300, 1.434263e01],
        [320, 2.354023e01],
        [340, 2.350015e01],
        [360, 2.711770e01],
        [380, 3.038317e01],
        [400, 3.514552e01],
        [420, 3.637113e01],
        [440, 4.175686e01],
        [460, 4.320284e01],
        [480, 5.251282e01],
        [500, 4.822531e01],
        [520, 1.266568e01],
        [540, 6.026177e01],
        [560, 2.295634e01],
        [580, 1.278878e01],
        [600, 1.285026e01],
        [620, 1.631099e01],
        [640, 1.344639e01],
        [660, 2.216281e01],
        [680, 1.085221e01],
        [700, 1.980827e01],
        [720, 1.866567e01],
        [740, 2.678724e01],
        [760, 2.639108e01],
        [780, 2.474718e01],
        [800, 1.710430e01],
        [820, 1.420265e01],
        [840, 3.130534e01],
        [860, 4.559051e01],
        [880, 4.401847e01],
        [900, 3.519444e01],
        [920, 3.137278e01],
        [940, 3.063303e01],
        [960, 2.593089e01],
        [980, 3.685096e01],
        [1000, 3.195143e01],
        [1020, 2.994210e01],
        [1040, 4.374435e01],
        [1060, 4.056249e01],
        [1080, 4.817070e01],
        [1100, 4.225397e01],
        [1120, 3.838916e01],
        [1140, 4.074653e01],
        [1160, 3.645463e01],
        [1180, 4.950979e01],
        [1200, 4.077587e01],
        [1220, 4.084504e01],
        [1240, 3.744205e01],
        [1260, 3.799709e01],
        [1280, 4.248902e01],
        [1300, 4.612252e01],
        [1320, 4.009288e01],
        [1340, 4.053956e01],
        [1360, 4.293869e01],
        [1380, 4.577526e01],
        [1400, 4.558973e01],
        [1420, 4.222858e01],
        [1440, 4.406543e01],
        [1460, 4.408000e01],
        [1480, 4.933896e01],
        [1500, 3.478664e01],
    ]
)


plt.figure(figsize=(10, 6))
plt.xlim((-20, 1520))
plt.ylim((0.0, 23))
plt.plot(a0[:, 0], a0[:, 1], label="Base implementation")
plt.plot(a1[:, 0], a1[:, 1], label="Optimization 1 (registers)")
plt.plot(a2[:, 0], a2[:, 1], label="Optimization 2 (AVX2)")
plt.plot(a3[:, 0], a3[:, 1], label="Optimization 3 (AVX2 + Blocking)")
plt.hlines(y=20.8, xmin=-20, xmax=1520, color="blue", ls="--", label="Theoretical single core max")
plt.vlines(x=395, ymin=0, ymax=23, color="black", ls="--")
plt.text(x=400, y=0.5, s="L2 Cache")
plt.legend(loc="best")
plt.ylabel("GFLOPS")
plt.xlabel(r"Matrix size $n$")
plt.show()
