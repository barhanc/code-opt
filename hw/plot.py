nflops_per_cycle = 4
nprocessors = 1
max_GHz_of_processor = 5.2
max_gflops = nflops_per_cycle * nprocessors * max_GHz_of_processor

# L1 Cache: 1408 Kb ; L2 Cache: 14 MB ; L3 Cache: 30 MB
# 16-Core (8P+8E)
# 24 Threads
# Intel Turbo Boost Max Technology 3.0 Frequency: Up to 5.2 GHz
# Single P-core Turbo Frequency: Up to 5.1 GHz
# Single E-core Turbo Frequency: Up to 3.9 GHz
# 819.2 GFLOPS (https://www.intel.com/content/dam/support/us/en/documents/processors/APP-for-Intel-Core-Processors.pdf)
"""
https://en.wikichip.org/wiki/intel/microarchitectures/alder_lake
L1I Cache	32 KB/core
L1D Cache	48 KB (P) / 64 KB (E)/core
L1 Cache	80 KB (P) / 96 KB (E)/core
L2 Cache	1.25 MB (P) / 2MB (4E)/core
L3 Cache	up to 30 MB
"""
# gcc -Wall -O2 -mavx -march=alderlake main.c -fopenmp -lm

import numpy as np
import matplotlib.pyplot as plt


a0 = np.array(
    [
        [20, 2.666667e00],
        [40, 2.666667e00],
        [60, 2.571429e00],
        [80, 2.509804e00],
        [100, 2.496879e00],
        [120, 2.482759e00],
        [140, 2.478771e00],
        [160, 2.473430e00],
        [180, 2.470140e00],
        [200, 2.469136e00],
        [220, 2.495138e00],
        [240, 2.452368e00],
        [260, 2.593478e00],
        [280, 2.562540e00],
        [300, 2.594034e00],
        [320, 2.596616e00],
        [340, 2.587151e00],
        [360, 2.587902e00],
        [380, 2.584340e00],
        [400, 2.577423e00],
        [420, 2.576526e00],
        [440, 2.577350e00],
        [460, 2.564139e00],
        [480, 2.578443e00],
        [500, 2.554670e00],
        [520, 2.563828e00],
        [540, 2.560016e00],
        [560, 2.549427e00],
        [580, 2.560424e00],
        [600, 2.560637e00],
        [620, 2.531271e00],
        [640, 2.539306e00],
        [660, 2.543515e00],
        [680, 2.520184e00],
        [700, 2.538851e00],
        [720, 2.546977e00],
        [740, 2.536542e00],
        [760, 2.532741e00],
        [780, 2.542497e00],
        [800, 2.542123e00],
        [820, 2.529722e00],
        [840, 2.534320e00],
        [860, 2.537110e00],
        [880, 2.532878e00],
        [900, 2.533269e00],
        [920, 2.527117e00],
        [940, 2.543361e00],
        [960, 2.514169e00],
        [980, 2.413396e00],
        [1000, 2.367525e00],
        [1020, 2.374976e00],
        [1040, 2.388490e00],
        [1060, 2.477034e00],
        [1080, 2.453334e00],
        [1100, 2.472914e00],
        [1120, 2.556902e00],
        [1140, 2.532086e00],
        [1160, 2.497174e00],
        [1180, 2.525616e00],
        [1200, 2.528467e00],
        [1220, 2.457202e00],
        [1240, 2.478730e00],
        [1260, 2.484512e00],
        [1280, 2.487800e00],
        [1300, 2.524352e00],
        [1320, 2.524112e00],
        [1340, 2.448968e00],
        [1360, 2.519366e00],
        [1380, 2.518993e00],
        [1400, 2.538460e00],
        [1420, 2.534773e00],
        [1440, 2.530121e00],
        [1460, 2.519851e00],
        [1480, 2.527323e00],
        [1500, 2.516407e00],
    ]
)

a1 = np.array(
    [
        [20, 1.066667e01],
        [40, 1.066667e01],
        [60, 8.470588e00],
        [80, 6.965986e00],
        [100, 7.246377e00],
        [120, 7.432258e00],
        [140, 8.058737e00],
        [160, 8.454076e00],
        [180, 8.563877e00],
        [200, 8.658009e00],
        [220, 8.742200e00],
        [240, 8.549165e00],
        [260, 8.796797e00],
        [280, 8.690420e00],
        [300, 8.494573e00],
        [320, 8.794418e00],
        [340, 8.474342e00],
        [360, 8.422421e00],
        [380, 9.209802e00],
        [400, 8.903728e00],
        [420, 8.938111e00],
        [440, 8.738165e00],
        [460, 8.635968e00],
        [480, 8.530371e00],
        [500, 8.409014e00],
        [520, 8.368777e00],
        [540, 8.246347e00],
        [560, 8.288661e00],
        [580, 7.880925e00],
        [600, 7.796849e00],
        [620, 7.872236e00],
        [640, 8.059522e00],
        [660, 8.048037e00],
        [680, 8.049974e00],
        [700, 8.019452e00],
        [720, 7.953462e00],
        [740, 7.919945e00],
        [760, 8.026183e00],
        [780, 7.990907e00],
        [800, 7.910757e00],
        [820, 7.933238e00],
        [840, 7.942911e00],
        [860, 7.858364e00],
        [880, 7.875239e00],
        [900, 7.895506e00],
        [920, 7.840351e00],
        [940, 7.898927e00],
        [960, 7.653293e00],
        [980, 7.808907e00],
        [1000, 7.840278e00],
        [1020, 7.883223e00],
        [1040, 7.869759e00],
        [1060, 7.933205e00],
        [1080, 7.901919e00],
        [1100, 7.934024e00],
        [1120, 7.676447e00],
        [1140, 7.799981e00],
        [1160, 7.675890e00],
        [1180, 7.528159e00],
        [1200, 7.802182e00],
        [1220, 7.928723e00],
        [1240, 7.741630e00],
        [1260, 7.844842e00],
        [1280, 7.698838e00],
        [1300, 7.798828e00],
        [1320, 7.570565e00],
        [1340, 7.760412e00],
        [1360, 7.555794e00],
        [1380, 6.931941e00],
        [1400, 7.161331e00],
        [1420, 7.279968e00],
        [1440, 7.032381e00],
        [1460, 7.479784e00],
        [1480, 7.870796e00],
        [1500, 7.775244e00],
    ]
)

a2 = np.array(
    [
        [20, 5.333333e00],
        [40, 8.533333e00],
        [60, 1.107692e01],
        [80, 1.219048e01],
        [100, 1.333333e01],
        [120, 1.422222e01],
        [140, 1.487263e01],
        [160, 1.508656e01],
        [180, 1.561446e01],
        [200, 1.592040e01],
        [220, 1.609675e01],
        [240, 1.634043e01],
        [260, 1.657331e01],
        [280, 1.670624e01],
        [300, 1.662050e01],
        [320, 1.665041e01],
        [340, 1.423284e01],
        [360, 1.510636e01],
        [380, 1.336060e01],
        [400, 1.307190e01],
        [420, 1.065401e01],
        [440, 1.091263e01],
        [460, 1.009343e01],
        [480, 9.159896e00],
        [500, 8.963465e00],
        [520, 8.544223e00],
        [540, 8.552713e00],
        [560, 8.331720e00],
        [580, 8.336516e00],
        [600, 8.051890e00],
        [620, 7.688620e00],
        [640, 7.874675e00],
        [660, 7.807724e00],
        [680, 7.741389e00],
        [700, 7.592359e00],
        [720, 7.684744e00],
        [740, 7.714144e00],
        [760, 7.554420e00],
        [780, 7.511824e00],
        [800, 7.559483e00],
        [820, 7.169189e00],
        [840, 7.478962e00],
        [860, 7.463869e00],
        [880, 7.469701e00],
        [900, 7.475428e00],
        [920, 7.453664e00],
        [940, 7.412222e00],
        [960, 7.468963e00],
        [980, 7.410494e00],
        [1000, 7.381000e00],
        [1020, 7.354026e00],
        [1040, 7.362085e00],
        [1060, 7.493141e00],
        [1080, 7.365445e00],
        [1100, 7.355765e00],
        [1120, 7.355952e00],
        [1140, 7.361691e00],
        [1160, 7.288015e00],
        [1180, 7.265601e00],
        [1200, 7.498438e00],
        [1220, 7.616493e00],
        [1240, 7.629914e00],
        [1260, 7.479481e00],
        [1280, 7.693797e00],
        [1300, 7.449377e00],
        [1320, 7.522578e00],
        [1340, 7.171429e00],
        [1360, 7.142580e00],
        [1380, 7.304278e00],
        [1400, 7.223828e00],
        [1420, 7.569129e00],
        [1440, 7.402823e00],
        [1460, 7.159990e00],
        [1480, 7.540279e00],
        [1500, 7.372263e00],
    ]
)

a3 = np.array(
    [
        [20, 5.333333e00],
        [40, 8.533333e00],
        [60, 9.000000e00],
        [80, 1.101075e01],
        [100, 1.129944e01],
        [120, 1.163636e01],
        [140, 1.195643e01],
        [160, 1.241212e01],
        [180, 1.266450e01],
        [200, 1.333333e01],
        [220, 1.336849e01],
        [240, 1.369391e01],
        [260, 1.342192e01],
        [280, 1.314885e01],
        [300, 1.364670e01],
        [320, 1.267866e01],
        [340, 1.259744e01],
        [360, 1.178628e01],
        [380, 1.240045e01],
        [400, 1.085942e01],
        [420, 1.164356e01],
        [440, 1.018643e01],
        [460, 1.034774e01],
        [480, 9.377766e00],
        [500, 9.354887e00],
        [520, 8.822463e00],
        [540, 8.680007e00],
        [560, 8.615596e00],
        [580, 8.537884e00],
        [600, 8.528280e00],
        [620, 8.821572e00],
        [640, 8.235364e00],
        [660, 8.914190e00],
        [680, 8.275942e00],
        [700, 8.507894e00],
        [720, 8.372544e00],
        [740, 8.209978e00],
        [760, 8.172089e00],
        [780, 8.037601e00],
        [800, 8.285393e00],
        [820, 8.270603e00],
        [840, 8.292988e00],
        [860, 8.271156e00],
        [880, 8.674763e00],
        [900, 8.284185e00],
        [920, 8.248464e00],
        [940, 8.269701e00],
        [960, 8.324381e00],
        [980, 8.247172e00],
        [1000, 8.220203e00],
        [1020, 7.210200e00],
        [1040, 8.055226e00],
        [1060, 8.216000e00],
        [1080, 8.376469e00],
        [1100, 8.279603e00],
        [1120, 8.188157e00],
        [1140, 8.416238e00],
        [1160, 8.292603e00],
        [1180, 8.311301e00],
        [1200, 8.361338e00],
        [1220, 8.326331e00],
        [1240, 8.470778e00],
        [1260, 8.516895e00],
        [1280, 7.874631e00],
        [1300, 8.881504e00],
        [1320, 8.389987e00],
        [1340, 8.567740e00],
        [1360, 8.440009e00],
        [1380, 8.629333e00],
        [1400, 8.607412e00],
        [1420, 8.531021e00],
        [1440, 9.197987e00],
        [1460, 8.666380e00],
        [1480, 8.581073e00],
        [1500, 8.375022e00],
    ]
)

a4 = np.array(
    [
        [20, 1.441441e-01],
        [40, 5.470085e-01],
        [60, 1.200000e00],
        [80, 2.133333e00],
        [100, 3.367003e00],
        [120, 4.902128e00],
        [140, 5.958740e00],
        [160, 7.937984e00],
        [180, 1.136842e01],
        [200, 1.519468e01],
        [220, 1.801692e01],
        [240, 2.080361e01],
        [260, 2.386422e01],
        [280, 2.368069e01],
        [300, 2.493075e01],
        [320, 2.761736e01],
        [340, 2.994590e01],
        [360, 3.088779e01],
        [380, 3.266190e01],
        [400, 3.391627e01],
        [420, 3.989661e01],
        [440, 4.780247e01],
        [460, 3.710158e01],
        [480, 5.955412e01],
        [500, 5.390254e01],
        [520, 4.526251e01],
        [540, 6.156950e01],
        [560, 4.144330e01],
        [580, 5.814692e01],
        [600, 5.921053e01],
        [620, 4.810334e01],
        [640, 4.622128e01],
        [660, 7.054251e01],
        [680, 7.853928e01],
        [700, 7.475210e01],
        [720, 8.086838e01],
        [740, 7.435985e01],
        [760, 7.818613e01],
        [780, 8.407335e01],
        [800, 8.014401e01],
        [820, 8.303110e01],
        [840, 8.839732e01],
        [860, 8.352124e01],
        [880, 5.187425e01],
        [900, 7.308271e01],
        [920, 8.962799e01],
        [940, 9.016816e01],
        [960, 8.718758e01],
        [980, 4.640300e01],
        [1000, 9.347542e01],
        [1020, 8.198772e01],
        [1040, 8.316617e01],
        [1060, 4.314103e01],
        [1080, 8.544186e01],
        [1100, 9.328567e01],
        [1120, 6.594513e01],
        [1140, 8.161428e01],
        [1160, 8.129667e01],
        [1180, 7.742664e01],
        [1200, 7.048027e01],
        [1220, 7.385098e01],
        [1240, 5.022652e01],
        [1260, 5.064884e01],
        [1280, 5.655750e01],
        [1300, 6.522385e01],
        [1320, 5.969911e01],
        [1340, 6.169497e01],
        [1360, 6.054046e01],
        [1380, 5.909697e01],
        [1400, 5.987018e01],
        [1420, 5.971341e01],
        [1440, 5.719125e01],
        [1460, 5.502168e01],
        [1480, 5.457700e01],
        [1500, 5.515111e01],
    ]
)


plt.figure(figsize=(10, 6))
plt.xlim((-20, 1520))
plt.ylim((0.0, 100))
plt.plot(a0[:, 0], a0[:, 1], label="Base implementation")
plt.plot(a1[:, 0], a1[:, 1], label="Optimization 1 (registers)")
plt.plot(a2[:, 0], a2[:, 1], label="Optimization 2 (AVX2)")
plt.plot(a3[:, 0], a3[:, 1], label="Optimization 3 (AVX2 + Blocking)")
plt.plot(a4[:, 0], a4[:, 1], label="Optimization 4 (AVX2 + OMP with 8 threads)")
plt.hlines(y=20.8, xmin=-20, xmax=1520, color="blue", ls="--", label="Theoretical single core max")
plt.vlines(x=395, ymin=0, ymax=100, color="black", ls="--")
plt.text(x=400, y=5, s="L2 Cache")
plt.legend(loc="best")
plt.ylabel("GFLOPS")
plt.xlabel(r"Matrix size $n$")
plt.show()
